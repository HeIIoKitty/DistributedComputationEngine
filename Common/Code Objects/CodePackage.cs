using Microsoft.CSharp;
using ProtoBuf;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Distributed.Code
{
	/// <summary>
	/// Class will be a sub-package that the WorkOrder package packet will be carrying
	/// when it heads to the master server from the master client to then be handled
	/// there.
	/// </summary>
	[ProtoContract]
	public class CodePackage : ICompiler
	{
		/// <summary>
		/// Members indicates the version number for a given executable
		/// package of code.
		/// </summary>
		[ProtoMember(1, IsRequired = true)]
		public int Version { get; protected set; }

		[ProtoMember(2, IsRequired=true)]
		public CodeData SerializerReadyCode { get; protected set; }

		private MethodInfo _ComputationMethod;

		/// <summary>
		/// This property exposes the method, generated by runtime complilation,
		/// that should be used for the remote computation.
		/// If the method is not yet compiled then it will compile it and return the MethodInfo
		/// </summary>
		public MethodInfo ComputationMethod
		{
			get
			{
				//TODO: Implement
				return null;
			}
		}

		public CodePackage(CodeData codeDataObject)
		{
			SerializerReadyCode = codeDataObject;
		}

		//Protobuf constructor
		protected CodePackage()
		{

		}

		/// <summary>
		/// When called will attempt to compile the source and produce a valid MethodInfo to invoke on.
		/// Will return true if successful.
		/// </summary>
		/// <param name="settings">Compiler settings desired for compilation.</param>
		/// <returns></returns>
		public bool Compile(CompileSettings settings = CompileSettings.Default)
		{
			return false;
			//TODO: Implement
			using (CSharpCodeProvider provider = new CSharpCodeProvider())
			{
				CompilerParameters parameters = new CompilerParameters();
			}
		}
	}
}
